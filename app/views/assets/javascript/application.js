// Generated by CoffeeScript 1.9.1
(function() {
  var Application, ChatController, FriendController, RoomController, UserController,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Application = angular.module('Application', ['ngRoute', 'ipCookie', 'ui.bootstrap', 'flash', 'angular-loading-bar', 'ngResource']);

  Application.config([
    '$routeProvider', function($routeProvider) {
      return $routeProvider.when('/', {
        controller: 'UserController',
        templateUrl: '/views.user.sign-in.html',
        controllerAs: 'ctrl'
      }).when('/room', {
        controller: 'FriendController',
        templateUrl: '/views.room.layout.html',
        controllerAs: 'ctrl'
      }).when('/room/:friendId', {
        controller: 'RoomController',
        templateUrl: '/views.room.layout.html',
        controllerAs: 'ctrl'
      }).otherwise({
        redirectTo: '/'
      });
    }
  ]);

  ChatController = (function() {
    ChatController.$inject = ['$scope', 'User', 'Friend', '$injector'];

    ChatController.prototype.getFriends = function() {
      this.scope.friends = [];
      return this.Friend.query((function(_this) {
        return function(data) {
          return _this.scope.friends = data;
        };
      })(this));
    };

    function ChatController(scope, User1, Friend1, injector) {
      this.scope = scope;
      this.User = User1;
      this.Friend = Friend1;
      this.injector = injector;
      this.init();
      this.getFriends();
    }

    ChatController.prototype.init = function() {};

    return ChatController;

  })();

  FriendController = (function(superClass) {
    extend(FriendController, superClass);

    function FriendController() {
      return FriendController.__super__.constructor.apply(this, arguments);
    }

    return FriendController;

  })(ChatController);

  Application.controller('FriendController', FriendController);

  RoomController = (function(superClass) {
    extend(RoomController, superClass);

    function RoomController() {
      return RoomController.__super__.constructor.apply(this, arguments);
    }

    RoomController.prototype.getMessages = function() {
      this.scope.messages = [];
      return this.Message.query({
        friendId: this.routeParams.friendId
      }, (function(_this) {
        return function(data) {
          return _this.scope.messages = data;
        };
      })(this));
    };

    RoomController.prototype.init = function() {
      this.Message = this.injector.get('Message');
      this.routeParams = this.injector.get('$routeParams');
      this.getMessages();
      return this.createMessage();
    };

    RoomController.prototype.send = function() {
      return this.scope.message.$save((function(_this) {
        return function() {
          return _this.createMessage();
        };
      })(this));
    };

    RoomController.prototype.createMessage = function() {
      return this.scope.message = new this.Message({
        to_id: this.routeParams.friendId
      });
    };

    return RoomController;

  })(ChatController);

  Application.controller('RoomController', RoomController);

  UserController = (function() {
    UserController.$inject = ['$scope', 'User', 'Flash', 'ipCookie'];

    function UserController(scope, User1, Flash, ipCookie1) {
      this.scope = scope;
      this.User = User1;
      this.Flash = Flash;
      this.ipCookie = ipCookie1;
      this.scope.user = {
        login: 'laleksandrov',
        password: 'laleksandrov'
      };
    }

    UserController.prototype.signIn = function() {
      return this.User.signIn(this.scope.user, (function(_this) {
        return function(data, next) {
          if (data.error) {
            _this.Flash.create('danger', data.error);
          } else {
            data.$login(data.login, data.token);
          }
          return next();
        };
      })(this));
    };

    return UserController;

  })();

  Application.controller('UserController', UserController);

  Application.directive('include', function() {
    return {
      replace: true,
      templateUrl: function(element, attr) {
        return attr['include'];
      }
    };
  });

  Application.factory('Friend', [
    '$resource', function($resource) {
      var Friend;
      Friend = $resource('/friend/:id', null, {});
      return Friend;
    }
  ]);

  Application.factory('Message', [
    '$resource', function($resource) {
      return $resource('/message/:id', null, {
        save: {
          url: '/message/create',
          method: 'POST'
        }
      });
    }
  ]);

  Application.factory('User', [
    '$resource', 'ipCookie', '$location', '$http', function($resource, ipCookie, $location, $http) {
      var User, setToken, token;
      token = ipCookie('token');
      setToken = function(token) {
        return $http.defaults.headers.common['access-token'] = token;
      };
      if (token) {
        setToken(token);
      }
      User = $resource('/user/:id', null, {
        signIn: {
          url: 'user/sign-in',
          method: "POST"
        },
        update: {
          method: 'PUT'
        }
      });
      User.prototype.$login = function(login, token) {
        ipCookie('token', token);
        ipCookie('login', login);
        setToken(token);
        return $location.path('/room');
      };
      return User;
    }
  ]);

}).call(this);
